
PowerOBCtwoway-OBC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000003f8  0000048c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800102  00800102  0000048e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000048e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f3c  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b75  00000000  00000000  00001504  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007a2  00000000  00000000  00002079  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  0000281c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e7  00000000  00000000  000029b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000412  00000000  00000000  00002f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000033ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	96 c0       	rjmp	.+300    	; 0x12e <__ctors_end>
   2:	00 00       	nop
   4:	b1 c0       	rjmp	.+354    	; 0x168 <__bad_interrupt>
   6:	00 00       	nop
   8:	af c0       	rjmp	.+350    	; 0x168 <__bad_interrupt>
   a:	00 00       	nop
   c:	ad c0       	rjmp	.+346    	; 0x168 <__bad_interrupt>
   e:	00 00       	nop
  10:	ab c0       	rjmp	.+342    	; 0x168 <__bad_interrupt>
  12:	00 00       	nop
  14:	a9 c0       	rjmp	.+338    	; 0x168 <__bad_interrupt>
  16:	00 00       	nop
  18:	a7 c0       	rjmp	.+334    	; 0x168 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a5 c0       	rjmp	.+330    	; 0x168 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a3 c0       	rjmp	.+326    	; 0x168 <__bad_interrupt>
  22:	00 00       	nop
  24:	a1 c0       	rjmp	.+322    	; 0x168 <__bad_interrupt>
  26:	00 00       	nop
  28:	9f c0       	rjmp	.+318    	; 0x168 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	9d c0       	rjmp	.+314    	; 0x168 <__bad_interrupt>
  2e:	00 00       	nop
  30:	9b c0       	rjmp	.+310    	; 0x168 <__bad_interrupt>
  32:	00 00       	nop
  34:	99 c0       	rjmp	.+306    	; 0x168 <__bad_interrupt>
  36:	00 00       	nop
  38:	97 c0       	rjmp	.+302    	; 0x168 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	95 c0       	rjmp	.+298    	; 0x168 <__bad_interrupt>
  3e:	00 00       	nop
  40:	93 c0       	rjmp	.+294    	; 0x168 <__bad_interrupt>
  42:	00 00       	nop
  44:	91 c0       	rjmp	.+290    	; 0x168 <__bad_interrupt>
  46:	00 00       	nop
  48:	8f c0       	rjmp	.+286    	; 0x168 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	8d c0       	rjmp	.+282    	; 0x168 <__bad_interrupt>
  4e:	00 00       	nop
  50:	8b c0       	rjmp	.+278    	; 0x168 <__bad_interrupt>
  52:	00 00       	nop
  54:	89 c0       	rjmp	.+274    	; 0x168 <__bad_interrupt>
  56:	00 00       	nop
  58:	87 c0       	rjmp	.+270    	; 0x168 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	85 c0       	rjmp	.+266    	; 0x168 <__bad_interrupt>
  5e:	00 00       	nop
  60:	83 c0       	rjmp	.+262    	; 0x168 <__bad_interrupt>
  62:	00 00       	nop
  64:	81 c0       	rjmp	.+258    	; 0x168 <__bad_interrupt>
  66:	00 00       	nop
  68:	7f c0       	rjmp	.+254    	; 0x168 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	7d c0       	rjmp	.+250    	; 0x168 <__bad_interrupt>
  6e:	00 00       	nop
  70:	7b c0       	rjmp	.+246    	; 0x168 <__bad_interrupt>
  72:	00 00       	nop
  74:	79 c0       	rjmp	.+242    	; 0x168 <__bad_interrupt>
  76:	00 00       	nop
  78:	77 c0       	rjmp	.+238    	; 0x168 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	75 c0       	rjmp	.+234    	; 0x168 <__bad_interrupt>
  7e:	00 00       	nop
  80:	73 c0       	rjmp	.+230    	; 0x168 <__bad_interrupt>
  82:	00 00       	nop
  84:	e8 c0       	rjmp	.+464    	; 0x256 <__vector_33>
  86:	00 00       	nop
  88:	6f c0       	rjmp	.+222    	; 0x168 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	47 01       	movw	r8, r14
  8e:	c6 01       	movw	r24, r12
  90:	c6 01       	movw	r24, r12
  92:	c6 01       	movw	r24, r12
  94:	c6 01       	movw	r24, r12
  96:	c6 01       	movw	r24, r12
  98:	c6 01       	movw	r24, r12
  9a:	c6 01       	movw	r24, r12
  9c:	47 01       	movw	r8, r14
  9e:	c6 01       	movw	r24, r12
  a0:	c6 01       	movw	r24, r12
  a2:	c6 01       	movw	r24, r12
  a4:	c6 01       	movw	r24, r12
  a6:	c6 01       	movw	r24, r12
  a8:	c6 01       	movw	r24, r12
  aa:	c6 01       	movw	r24, r12
  ac:	49 01       	movw	r8, r18
  ae:	c6 01       	movw	r24, r12
  b0:	c6 01       	movw	r24, r12
  b2:	c6 01       	movw	r24, r12
  b4:	c6 01       	movw	r24, r12
  b6:	c6 01       	movw	r24, r12
  b8:	c6 01       	movw	r24, r12
  ba:	c6 01       	movw	r24, r12
  bc:	c6 01       	movw	r24, r12
  be:	c6 01       	movw	r24, r12
  c0:	c6 01       	movw	r24, r12
  c2:	c6 01       	movw	r24, r12
  c4:	c6 01       	movw	r24, r12
  c6:	c6 01       	movw	r24, r12
  c8:	c6 01       	movw	r24, r12
  ca:	c6 01       	movw	r24, r12
  cc:	49 01       	movw	r8, r18
  ce:	c6 01       	movw	r24, r12
  d0:	c6 01       	movw	r24, r12
  d2:	c6 01       	movw	r24, r12
  d4:	c6 01       	movw	r24, r12
  d6:	c6 01       	movw	r24, r12
  d8:	c6 01       	movw	r24, r12
  da:	c6 01       	movw	r24, r12
  dc:	c6 01       	movw	r24, r12
  de:	c6 01       	movw	r24, r12
  e0:	c6 01       	movw	r24, r12
  e2:	c6 01       	movw	r24, r12
  e4:	c6 01       	movw	r24, r12
  e6:	c6 01       	movw	r24, r12
  e8:	c6 01       	movw	r24, r12
  ea:	c6 01       	movw	r24, r12
  ec:	c2 01       	movw	r24, r4
  ee:	c6 01       	movw	r24, r12
  f0:	c6 01       	movw	r24, r12
  f2:	c6 01       	movw	r24, r12
  f4:	c6 01       	movw	r24, r12
  f6:	c6 01       	movw	r24, r12
  f8:	c6 01       	movw	r24, r12
  fa:	c6 01       	movw	r24, r12
  fc:	8d 01       	movw	r16, r26
  fe:	c6 01       	movw	r24, r12
 100:	c6 01       	movw	r24, r12
 102:	c6 01       	movw	r24, r12
 104:	c6 01       	movw	r24, r12
 106:	c6 01       	movw	r24, r12
 108:	c6 01       	movw	r24, r12
 10a:	c6 01       	movw	r24, r12
 10c:	c6 01       	movw	r24, r12
 10e:	c6 01       	movw	r24, r12
 110:	c6 01       	movw	r24, r12
 112:	c6 01       	movw	r24, r12
 114:	c6 01       	movw	r24, r12
 116:	c6 01       	movw	r24, r12
 118:	c6 01       	movw	r24, r12
 11a:	c6 01       	movw	r24, r12
 11c:	6f 01       	movw	r12, r30
 11e:	c6 01       	movw	r24, r12
 120:	c6 01       	movw	r24, r12
 122:	c6 01       	movw	r24, r12
 124:	c6 01       	movw	r24, r12
 126:	c6 01       	movw	r24, r12
 128:	c6 01       	movw	r24, r12
 12a:	c6 01       	movw	r24, r12
 12c:	9f 01       	movw	r18, r30

0000012e <__ctors_end>:
 12e:	11 24       	eor	r1, r1
 130:	1f be       	out	0x3f, r1	; 63
 132:	cf ef       	ldi	r28, 0xFF	; 255
 134:	d0 e1       	ldi	r29, 0x10	; 16
 136:	de bf       	out	0x3e, r29	; 62
 138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
 13a:	11 e0       	ldi	r17, 0x01	; 1
 13c:	a0 e0       	ldi	r26, 0x00	; 0
 13e:	b1 e0       	ldi	r27, 0x01	; 1
 140:	e8 ef       	ldi	r30, 0xF8	; 248
 142:	f3 e0       	ldi	r31, 0x03	; 3
 144:	00 e0       	ldi	r16, 0x00	; 0
 146:	0b bf       	out	0x3b, r16	; 59
 148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
 14a:	07 90       	elpm	r0, Z+
 14c:	0d 92       	st	X+, r0
 14e:	a2 30       	cpi	r26, 0x02	; 2
 150:	b1 07       	cpc	r27, r17
 152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
 154:	21 e0       	ldi	r18, 0x01	; 1
 156:	a2 e0       	ldi	r26, 0x02	; 2
 158:	b1 e0       	ldi	r27, 0x01	; 1
 15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
 15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
 15e:	a9 30       	cpi	r26, 0x09	; 9
 160:	b2 07       	cpc	r27, r18
 162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
 164:	02 d0       	rcall	.+4      	; 0x16a <main>
 166:	46 c1       	rjmp	.+652    	; 0x3f4 <_exit>

00000168 <__bad_interrupt>:
 168:	4b cf       	rjmp	.-362    	; 0x0 <__vectors>

0000016a <main>:
#include "TWI_Master.h"
#include "common.h"
#include "uart.h"

int main(void)
{
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
 172:	2f 97       	sbiw	r28, 0x0f	; 15
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	f8 94       	cli
 178:	de bf       	out	0x3e, r29	; 62
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	cd bf       	out	0x3d, r28	; 61
	sei();
 17e:	78 94       	sei
	unsigned char HM_data[7];	
	unsigned char msg_buf[8];
	unsigned char SLA=0x20;
	
	HM_data[0]=SLA+0x00;
 180:	80 e2       	ldi	r24, 0x20	; 32
 182:	89 83       	std	Y+1, r24	; 0x01
	msg_buf[0]=SLA+0x01;
 184:	81 e2       	ldi	r24, 0x21	; 33
	TWI_Master_Initialise();
	init_UART0();
 186:	88 87       	std	Y+8, r24	; 0x08
 188:	1d d0       	rcall	.+58     	; 0x1c4 <TWI_Master_Initialise>
    while (1) 
    {
		//-------------master transmitter----------------------//
		 
		//HM_data[1]=receive_UART0();
		HM_data[1]='0';
 18a:	16 d1       	rcall	.+556    	; 0x3b8 <init_UART0>
 18c:	10 e3       	ldi	r17, 0x30	; 48
		
		TWI_Start_Transceiver_With_Data(HM_data,2);//HM_data[0]=address,HM_data[1]=data
 18e:	1a 83       	std	Y+2, r17	; 0x02
 190:	62 e0       	ldi	r22, 0x02	; 2
 192:	ce 01       	movw	r24, r28
		//transmit_UART0('1');
		//_delay_ms(1000);
		//--------------------master receiver-------------------//
	
		TWI_Start_Transceiver_With_Data(msg_buf,1);//mr//twi buff =address, len should be >=1, could be anything more than that
 194:	01 96       	adiw	r24, 0x01	; 1
 196:	20 d0       	rcall	.+64     	; 0x1d8 <TWI_Start_Transceiver_With_Data>
 198:	61 e0       	ldi	r22, 0x01	; 1
		//transmit_UART0('2');
		unsigned char z = TWI_Get_Data_From_Transceiver(msg_buf,2);//msg_buf[0]=address, because in isr we defined that,msg_buf[1]=data 
 19a:	ce 01       	movw	r24, r28
 19c:	08 96       	adiw	r24, 0x08	; 8
 19e:	1c d0       	rcall	.+56     	; 0x1d8 <TWI_Start_Transceiver_With_Data>
		//transmit_UART0('3');
		
		//transmit_UART0(msg_buf[0]);//this prints address
		transmit_UART0(msg_buf[1]);//this prints data received
 1a0:	62 e0       	ldi	r22, 0x02	; 2
 1a2:	ce 01       	movw	r24, r28
 1a4:	08 96       	adiw	r24, 0x08	; 8
		transmit_UART0('b');
 1a6:	3a d0       	rcall	.+116    	; 0x21c <TWI_Get_Data_From_Transceiver>
 1a8:	89 85       	ldd	r24, Y+9	; 0x09
 1aa:	17 d1       	rcall	.+558    	; 0x3da <transmit_UART0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ac:	82 e6       	ldi	r24, 0x62	; 98
 1ae:	15 d1       	rcall	.+554    	; 0x3da <transmit_UART0>
 1b0:	2f e7       	ldi	r18, 0x7F	; 127
 1b2:	88 e3       	ldi	r24, 0x38	; 56
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	21 50       	subi	r18, 0x01	; 1
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <main+0x4c>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <main+0x56>
 1c0:	00 00       	nop
 1c2:	e5 cf       	rjmp	.-54     	; 0x18e <main+0x24>

000001c4 <TWI_Master_Initialise>:
void TWI_Start_Transceiver( void )
{
  while ( TWI_Transceiver_Busy() );             // Wait until TWI is ready for next transmission.
  TWI_statusReg.all = 0;      
  TWI_state         = TWI_NO_STATE ;
  TWCR = (1<<TWEN)|                             // TWI Interface enabled.
 1c4:	8c e0       	ldi	r24, 0x0C	; 12
 1c6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 1ca:	8f ef       	ldi	r24, 0xFF	; 255
 1cc:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 1d0:	84 e0       	ldi	r24, 0x04	; 4
 1d2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 1d6:	08 95       	ret

000001d8 <TWI_Start_Transceiver_With_Data>:
 1d8:	dc 01       	movw	r26, r24
 1da:	e4 e7       	ldi	r30, 0x74	; 116
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	90 81       	ld	r25, Z
 1e0:	90 fd       	sbrc	r25, 0
 1e2:	fd cf       	rjmp	.-6      	; 0x1de <TWI_Start_Transceiver_With_Data+0x6>
 1e4:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <TWI_msgSize>
 1e8:	8c 91       	ld	r24, X
 1ea:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <TWI_buf>
 1ee:	80 fd       	sbrc	r24, 0
 1f0:	0c c0       	rjmp	.+24     	; 0x20a <TWI_Start_Transceiver_With_Data+0x32>
 1f2:	62 30       	cpi	r22, 0x02	; 2
 1f4:	50 f0       	brcs	.+20     	; 0x20a <TWI_Start_Transceiver_With_Data+0x32>
 1f6:	fd 01       	movw	r30, r26
 1f8:	31 96       	adiw	r30, 0x01	; 1
 1fa:	a6 e0       	ldi	r26, 0x06	; 6
 1fc:	b1 e0       	ldi	r27, 0x01	; 1
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	91 91       	ld	r25, Z+
 202:	9d 93       	st	X+, r25
 204:	8f 5f       	subi	r24, 0xFF	; 255
 206:	68 13       	cpse	r22, r24
 208:	fb cf       	rjmp	.-10     	; 0x200 <TWI_Start_Transceiver_With_Data+0x28>
 20a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <TWI_statusReg>
 20e:	88 ef       	ldi	r24, 0xF8	; 248
 210:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 214:	85 ea       	ldi	r24, 0xA5	; 165
 216:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 21a:	08 95       	ret

0000021c <TWI_Get_Data_From_Transceiver>:
/****************************************************************************
Call this function to test if the TWI_ISR is busy transmitting.
****************************************************************************/
unsigned char TWI_Transceiver_Busy( void )
{
  return ( TWCR & (1<<TWIE) );                  // IF TWI Interrupt is enabled then the Transceiver is busy
 21c:	e4 e7       	ldi	r30, 0x74	; 116
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	20 81       	ld	r18, Z
****************************************************************************/
unsigned char TWI_Get_Data_From_Transceiver( unsigned char *msg, unsigned char msgSize )
{
  unsigned char i;

  while ( TWI_Transceiver_Busy() );             // Wait until TWI is ready for next transmission.
 222:	20 fd       	sbrc	r18, 0
 224:	fd cf       	rjmp	.-6      	; 0x220 <TWI_Get_Data_From_Transceiver+0x4>

  if( TWI_statusReg.lastTransOK )               // Last transmission competed successfully.              
 226:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <TWI_statusReg>
 22a:	20 ff       	sbrs	r18, 0
 22c:	10 c0       	rjmp	.+32     	; 0x24e <TWI_Get_Data_From_Transceiver+0x32>
  {                                             
    for ( i=0; i<msgSize; i++ )                 // Copy data from Transceiver buffer.
 22e:	66 23       	and	r22, r22
 230:	71 f0       	breq	.+28     	; 0x24e <TWI_Get_Data_From_Transceiver+0x32>
 232:	e5 e0       	ldi	r30, 0x05	; 5
 234:	f1 e0       	ldi	r31, 0x01	; 1
 236:	a8 2f       	mov	r26, r24
 238:	b9 2f       	mov	r27, r25
 23a:	61 50       	subi	r22, 0x01	; 1
 23c:	86 2f       	mov	r24, r22
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	8a 5f       	subi	r24, 0xFA	; 250
 242:	9e 4f       	sbci	r25, 0xFE	; 254
    {
      msg[ i ] = TWI_buf[ i ];
 244:	21 91       	ld	r18, Z+
 246:	2d 93       	st	X+, r18

  while ( TWI_Transceiver_Busy() );             // Wait until TWI is ready for next transmission.

  if( TWI_statusReg.lastTransOK )               // Last transmission competed successfully.              
  {                                             
    for ( i=0; i<msgSize; i++ )                 // Copy data from Transceiver buffer.
 248:	e8 17       	cp	r30, r24
 24a:	f9 07       	cpc	r31, r25
 24c:	d9 f7       	brne	.-10     	; 0x244 <TWI_Get_Data_From_Transceiver+0x28>
	//// transmit_uart0('1');
	//// transmit_uart0(msg[0]);//prints address
	//// transmit_uart0(msg[1]); //prints data received
	//// transmit_uart0('2');
  }
  return( TWI_statusReg.lastTransOK );    
 24e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <TWI_statusReg>
                                
}
 252:	81 70       	andi	r24, 0x01	; 1
 254:	08 95       	ret

00000256 <__vector_33>:
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
//#pragma vector=TWI_vect
ISR(TWI_vect)
{
 256:	1f 92       	push	r1
 258:	0f 92       	push	r0
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	0f 92       	push	r0
 25e:	11 24       	eor	r1, r1
 260:	0b b6       	in	r0, 0x3b	; 59
 262:	0f 92       	push	r0
 264:	2f 93       	push	r18
 266:	3f 93       	push	r19
 268:	8f 93       	push	r24
 26a:	9f 93       	push	r25
 26c:	af 93       	push	r26
 26e:	bf 93       	push	r27
 270:	ef 93       	push	r30
 272:	ff 93       	push	r31
	/*// transmit_uart0(TWDR);
	// transmit_uart0(TWSR);
	_delay_ms(50);*/
  static unsigned char TWI_bufPtr;
 // // transmit_uart0(TWSR);
  switch (TWSR)
 274:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 278:	8e 2f       	mov	r24, r30
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	fc 01       	movw	r30, r24
 27e:	38 97       	sbiw	r30, 0x08	; 8
 280:	e1 35       	cpi	r30, 0x51	; 81
 282:	f1 05       	cpc	r31, r1
 284:	08 f0       	brcs	.+2      	; 0x288 <__vector_33+0x32>
 286:	82 c0       	rjmp	.+260    	; 0x38c <__vector_33+0x136>
 288:	ea 5b       	subi	r30, 0xBA	; 186
 28a:	ff 4f       	sbci	r31, 0xFF	; 255
 28c:	aa c0       	rjmp	.+340    	; 0x3e2 <__tablejump2__>
  {
    case TWI_START:             // START has been transmitted  
    case TWI_REP_START:         // Repeated START has been transmitted
      TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
 28e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
    case TWI_MTX_ADR_ACK:       // SLA+W has been tramsmitted and ACK received
    case TWI_MTX_DATA_ACK:      // Data byte has been tramsmitted and ACK received
	
      if (TWI_bufPtr < TWI_msgSize)
 292:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 296:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <TWI_msgSize>
 29a:	e8 17       	cp	r30, r24
 29c:	70 f4       	brcc	.+28     	; 0x2ba <__vector_33+0x64>
      {
        TWDR = TWI_buf[TWI_bufPtr++];
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	8e 0f       	add	r24, r30
 2a2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	eb 5f       	subi	r30, 0xFB	; 251
 2aa:	fe 4f       	sbci	r31, 0xFE	; 254
 2ac:	80 81       	ld	r24, Z
 2ae:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 2b2:	85 e8       	ldi	r24, 0x85	; 133
 2b4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 2b8:	08 c0       	rjmp	.+16     	; 0x2ca <__vector_33+0x74>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to send byte
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
               (0<<TWWC);                                 //  
      }else                    // Send STOP after last byte
      {
        TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 2ba:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <TWI_statusReg>
 2be:	81 60       	ori	r24, 0x01	; 1
 2c0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <TWI_statusReg>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 2c4:	84 e9       	ldi	r24, 0x94	; 148
 2c6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 2ca:	2f e7       	ldi	r18, 0x7F	; 127
 2cc:	88 e3       	ldi	r24, 0x38	; 56
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	21 50       	subi	r18, 0x01	; 1
 2d2:	80 40       	sbci	r24, 0x00	; 0
 2d4:	90 40       	sbci	r25, 0x00	; 0
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <__vector_33+0x7a>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <__vector_33+0x84>
 2da:	00 00       	nop
 2dc:	5e c0       	rjmp	.+188    	; 0x39a <__vector_33+0x144>
      }
	  // transmit_uart0(TWI_bufPtr);
	  _delay_ms(50);
      break;
    case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK tramsmitted
      TWI_buf[TWI_bufPtr++] = TWDR;
 2de:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	8e 0f       	add	r24, r30
 2e6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 2ea:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	eb 5f       	subi	r30, 0xFB	; 251
 2f2:	fe 4f       	sbci	r31, 0xFE	; 254
 2f4:	80 83       	st	Z, r24
 2f6:	2f e7       	ldi	r18, 0x7F	; 127
 2f8:	88 e3       	ldi	r24, 0x38	; 56
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	21 50       	subi	r18, 0x01	; 1
 2fe:	80 40       	sbci	r24, 0x00	; 0
 300:	90 40       	sbci	r25, 0x00	; 0
 302:	e1 f7       	brne	.-8      	; 0x2fc <__vector_33+0xa6>
 304:	00 c0       	rjmp	.+0      	; 0x306 <__vector_33+0xb0>
 306:	00 00       	nop
 308:	2f e7       	ldi	r18, 0x7F	; 127
 30a:	88 e3       	ldi	r24, 0x38	; 56
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	21 50       	subi	r18, 0x01	; 1
 310:	80 40       	sbci	r24, 0x00	; 0
 312:	90 40       	sbci	r25, 0x00	; 0
 314:	e1 f7       	brne	.-8      	; 0x30e <__vector_33+0xb8>
 316:	00 c0       	rjmp	.+0      	; 0x318 <__vector_33+0xc2>
 318:	00 00       	nop
	  // transmit_uart0(TWI_bufPtr);
	  _delay_ms(50);
	  // transmit_uart0(TWDR);
	  _delay_ms(50);
    case TWI_MRX_ADR_ACK:       // SLA+R has been tramsmitted and ACK received
      if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
 31a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <TWI_msgSize>
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	28 17       	cp	r18, r24
 32a:	39 07       	cpc	r19, r25
 32c:	24 f4       	brge	.+8      	; 0x336 <__vector_33+0xe0>
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 32e:	85 ec       	ldi	r24, 0xC5	; 197
 330:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 334:	32 c0       	rjmp	.+100    	; 0x39a <__vector_33+0x144>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to read next byte
               (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
               (0<<TWWC);                                 //  
      } else                    // Send NACK after next reception
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 336:	85 e8       	ldi	r24, 0x85	; 133
 338:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 33c:	2e c0       	rjmp	.+92     	; 0x39a <__vector_33+0x144>
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
               (0<<TWWC);                                 //
      }
      break; 
    case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK tramsmitted
      TWI_buf[TWI_bufPtr] = TWDR;
 33e:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 342:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	eb 5f       	subi	r30, 0xFB	; 251
 34a:	fe 4f       	sbci	r31, 0xFE	; 254
 34c:	80 83       	st	Z, r24
 34e:	2f e7       	ldi	r18, 0x7F	; 127
 350:	88 e3       	ldi	r24, 0x38	; 56
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	21 50       	subi	r18, 0x01	; 1
 356:	80 40       	sbci	r24, 0x00	; 0
 358:	90 40       	sbci	r25, 0x00	; 0
 35a:	e1 f7       	brne	.-8      	; 0x354 <__vector_33+0xfe>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <__vector_33+0x108>
 35e:	00 00       	nop
 360:	2f e7       	ldi	r18, 0x7F	; 127
 362:	88 e3       	ldi	r24, 0x38	; 56
 364:	91 e0       	ldi	r25, 0x01	; 1
 366:	21 50       	subi	r18, 0x01	; 1
 368:	80 40       	sbci	r24, 0x00	; 0
 36a:	90 40       	sbci	r25, 0x00	; 0
 36c:	e1 f7       	brne	.-8      	; 0x366 <__vector_33+0x110>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <__vector_33+0x11a>
 370:	00 00       	nop
	  // transmit_uart0(TWI_bufPtr);
	  _delay_ms(50);
	  // transmit_uart0(TWDR);
	  _delay_ms(50);
      TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 372:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <TWI_statusReg>
 376:	81 60       	ori	r24, 0x01	; 1
 378:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <TWI_statusReg>
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 37c:	84 e9       	ldi	r24, 0x94	; 148
 37e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
             (0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
             (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
             (0<<TWWC);                                 //
      break;      
 382:	0b c0       	rjmp	.+22     	; 0x39a <__vector_33+0x144>
    case TWI_ARB_LOST:          // Arbitration lost
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 384:	85 ea       	ldi	r24, 0xA5	; 165
 386:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
             (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag
             (0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
             (0<<TWWC);                                 //
      break;
 38a:	07 c0       	rjmp	.+14     	; 0x39a <__vector_33+0x144>
    case TWI_MRX_ADR_NACK:      // SLA+R has been tramsmitted and NACK received    
    case TWI_MTX_DATA_NACK:     // Data byte has been tramsmitted and NACK received
//    case TWI_NO_STATE              // No relevant state information available; TWINT = “0”
    case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
    default:     
      TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
 38c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 390:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
                                                        // Reset TWI Interface
      TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
 394:	84 e0       	ldi	r24, 0x04	; 4
 396:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
             (0<<TWIE)|(0<<TWINT)|                      // Disable Interupt
             (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
             (0<<TWWC);                                 //
  }
}
 39a:	ff 91       	pop	r31
 39c:	ef 91       	pop	r30
 39e:	bf 91       	pop	r27
 3a0:	af 91       	pop	r26
 3a2:	9f 91       	pop	r25
 3a4:	8f 91       	pop	r24
 3a6:	3f 91       	pop	r19
 3a8:	2f 91       	pop	r18
 3aa:	0f 90       	pop	r0
 3ac:	0b be       	out	0x3b, r0	; 59
 3ae:	0f 90       	pop	r0
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	0f 90       	pop	r0
 3b4:	1f 90       	pop	r1
 3b6:	18 95       	reti

000003b8 <init_UART0>:
void transmit_UART1(char data)
{
  //* Wait for empty transmit buffer 
  while ( !(UCSR1A & (_BV(UDRE1))) );
  //* Start transmission
  UDR1 = data;
 3b8:	1b b8       	out	0x0b, r1	; 11
 3ba:	1a b8       	out	0x0a, r1	; 10
 3bc:	e5 e9       	ldi	r30, 0x95	; 149
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	10 82       	st	Z, r1
 3c2:	59 9a       	sbi	0x0b, 1	; 11
 3c4:	8a b1       	in	r24, 0x0a	; 10
 3c6:	88 61       	ori	r24, 0x18	; 24
 3c8:	8a b9       	out	0x0a, r24	; 10
 3ca:	80 81       	ld	r24, Z
 3cc:	8e 60       	ori	r24, 0x0E	; 14
 3ce:	80 83       	st	Z, r24
 3d0:	87 e6       	ldi	r24, 0x67	; 103
 3d2:	89 b9       	out	0x09, r24	; 9
 3d4:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 3d8:	08 95       	ret

000003da <transmit_UART0>:
}

void transmit_UART0(uint8_t data)
{
  //* Wait for empty transmit buffer 
  while ( !(UCSR0A & (_BV(UDRE0))) );
 3da:	5d 9b       	sbis	0x0b, 5	; 11
 3dc:	fe cf       	rjmp	.-4      	; 0x3da <transmit_UART0>
  //* Start transmission
  UDR0 = data;
 3de:	8c b9       	out	0x0c, r24	; 12
 3e0:	08 95       	ret

000003e2 <__tablejump2__>:
 3e2:	ee 0f       	add	r30, r30
 3e4:	ff 1f       	adc	r31, r31
 3e6:	00 24       	eor	r0, r0
 3e8:	00 1c       	adc	r0, r0
 3ea:	0b be       	out	0x3b, r0	; 59
 3ec:	07 90       	elpm	r0, Z+
 3ee:	f6 91       	elpm	r31, Z
 3f0:	e0 2d       	mov	r30, r0
 3f2:	09 94       	ijmp

000003f4 <_exit>:
 3f4:	f8 94       	cli

000003f6 <__stop_program>:
 3f6:	ff cf       	rjmp	.-2      	; 0x3f6 <__stop_program>
